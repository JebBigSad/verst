Задача 1: 
Напишите функцию containsChar, которая проверяет содержится ли символ в строке с учетом регистра

console.log(containsChar('hello', 'e')); // true
console.log(containsChar('world', 'z')); // false
console.log(containsChar('Hello', 'h')); // false

Задача 2: Напишите функцию reverse, которая возвращает строку в обратном порядке

// Примеры вызова:
console.log(reverse('listen')); // 'netsil'
console.log(reverse('hello')); // 'olleh'

Задача 3: Напишите функцию wordsToRegister, которая принимает строку и возвращает четные символы в верхнем регистре, а нечетные в нижнем

// Примеры вызова:
console.log(wordsToRegister('hello')); // 'hElLo'
console.log(wordsToRegister('test test')); // 'tEsT tEsT'


Задача 4: Напишите функцию sumOfDigitsInString, которая подсчитывает суммы всех цифр в строке
Возвращает сумму всех чисел, содержащихся в строке.


// Примеры вызова:
console.log(sumOfDigitsInString('abc123')); // 6
console.log(sumOfDigitsInString('5 apples and 3 oranges')); // 8

Задача 5: Напишите функцию checkChars, которая принимает строку, символ, который нужно заменить и символ, на который нужно заменить, и возвращает строку, в которой все изменено.

Если целевой символ не найден, функция возвращает строку 'Error'.

// Примеры вызова:
console.log(checkChars('Test!', '!', '?')); // 'Test?'
console.log(checkChars('Hello world', 'a', 'b')); // 'Error'
console.log(checkChars('hexlet', 'e', 'o')); // 'hoxlot'


Реализуйте функцию concatenateStrings, которая принимает две строки в качестве аргументов, возвращает результат 
их конкатенации и удаляет все пробелы.

Задача 2
//Реализуйте функцию getStringLength, которая принимает строку в качестве аргумента и возвращает ее длину.

Задача 3
/*
Реализуйте функцию getStringFromTemplate, которая принимает параметры firstName и lastName 
и возвращает результат подстановки этих значений в строку-шаблон 'Hello, firstName  lastName!'.
Важно: используйте интерполяцию (шаблонные строки) для формирования результата, а не операцию конкатенации.

'John','Doe'      => 'Hello, John Doe!'
'Chuck','Norris'  => 'Hello, Chuck Norris!'


Задача 4
/*
Реализуйте функцию getChar, которая принимает строку и порядковый номер символа в строке 
и возвращает символ, соответствующий этому порядковому номеру.

'John Doe', 1  => 'J'
'cat', 3       => 't'


Задача 5
/*
Реализуйте функцию removeFirstOccurrences, которая удаляет первое вхождение подстроки  внутри строки.

'To be or not to be', 'not'  => 'To be or  to be'
'I like legends', 'end' => 'I like legs',
'ABABAB','BA' => 'ABAB'
*/

Задача 6
/* 
Реализуйте функцию getRectangleString, которая  возвращает строковое представление прямоугольника 
с заданной шириной и высотой, используя символы '*'.
        *
5, 4 => *   *
        *   *
        *




        1. Возвращает площадь прямоугольниĸа, заданного шириной и
// высотой. Параметры:
// ○ width(число)—ширина.
// ○ height(число)—высота.
// Пример:
// ○ 5,10=>50
// ○ 5,5=>25


3. Возвращает среднее значение двух заданных чисел. Параметры:
// ○ value1(число).
// ○ value2(число).
// Пример:
// ○ 5,5=>5
// ○ 10,0=>5
// ○ -3,3=>0




 2. Возвращает длину оĸружности ĸруга, заданного радиусом. Параметры:
// ○ radius(число)—радиус. Пример:
// ○ 5=>31.41592653589793
// ○ 3.14=>19.729201864543903
// ○ 0=>0

// 4. Возвращает расстояние между двумя точĸами на плосĸости (по деĸартовым ĸоординатам).
// Параметры:
// ○ x1,y1(числа)—ĸоординатыпервойточĸи.
// ○ x2,y2(числа)—ĸоординатывторойточĸи.
// Пример:
// ○ (0,0, 0,1)=>1
// ○ (0,0, 1,0)=>1
// ○ (-5,0, 10,-10)=>18.027756377319946


 Возвращает ĸорень линейного уравнения вида a*x + b = 0. Параметры:
// ○ a(число).
// ○ b(число).
// Пример:
// ○ 5*x-10=0=>2
// ○ x+8=0=>-8
// ○ 5*x=0=>0

 6. Возвращает угол (в радианах) между двумя веĸторами, заданными ĸоординатами на плосĸости.
// Параметры:
// ○ x1,y1(числа)—ĸоординатыпервоговеĸтора.
// ○ x2,y2(числа)—ĸоординатывтороговеĸтора.
// Пример:
// ○ (1,0),(0,1)=>π/2
// ○ (0,1),(0,-1)=>π
// ○ (0,-1),(1,0)=>π/2

7. Возвращает последнюю цифру заданного целого числа. Параметры:
// ○ value(число). Пример:
// ○ 100=>0
// ○ 37=>7
// ○ 5=>5

 8. Возвращает число из строĸового представления. Параметры:


  9. Возвращает длину диагонали прямоугольного параллелепипеда, заданного его сторонами a, b, c. Параметры:
// ○ a,b,c(числа)—длинысторон. Пример:
// ○ 1,1,1=>1.7320508075688772
// ○ 3,3,3=>5.196152422706632
// ○ 1,2,3=>3.741657386773941


10. Возвращает число, оĸруглённое до заданной степени числа 10.
// Параметры:
// ○ num(число).
// ○ pow(число)—степеньчисла10.
// Пример:
// ○ 1234,0=>1234
// ○ 1234,1=>1230
// ○ 1234,2=>1200

Возвращает true, если заданное число является простым, иначе false.
// Параметры:
// ○ n(число). Пример:
// ○ 4=>false
// ○ 5=>true
// ○ 6=>false


12. Пытается преобразовать значение в число и возвращает его, если преобразование было успешным, иначе возвращает значение по умолчанию.
// Параметры:
// ○ value(любой тип).
// ○ def(любой тип)—значение по умолчанию.
// Пример:
// ○ toNumber(null,0)=>0
// ○ toNumber('test',0)=>0
// ○ toNumber('1',0)=>1